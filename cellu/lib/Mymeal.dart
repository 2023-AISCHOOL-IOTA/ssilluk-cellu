import 'package:ssuilluk-cellu/MealCreate.dart';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'MealCreate.dart';
void main() {
  runApp(const Mymeal());
}
// FIXME : 클래스명 변경
// Generated by: https://www.figma.com/community/plugin/842128343887142055/
class Mymeal extends StatelessWidget {
  const Mymeal({super.key});Future<List<DietPlan>> fetchDietPlans() async {
    final response = await http.get(Uri.parse('http://your-backend-server.com/diet-plans'));

    if (response.statusCode == 200) {
      List jsonResponse = json.decode(response.body);
      List<DietPlan> dietPlans = jsonResponse.map((item) => DietPlan.fromJson(item)).toList();

      // 날짜와 시간 기준으로 정렬합니다. 최신 정보가 앞에 오도록 합니다.
      dietPlans.sort((a, b) {
        DateTime dateTimeA = DateTime.parse(a.date + ' ' + a.time);
        DateTime dateTimeB = DateTime.parse(b.date + ' ' + b.time);
        return dateTimeB.compareTo(dateTimeA);
      });

      // 최신의 3개만 반환합니다.
      return dietPlans.take(3).toList();
    } else {
      throw Exception('Failed to load diet plans from server');
    }
  }


  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      theme: ThemeData.dark().copyWith(
        scaffoldBackgroundColor: const Color.fromARGB(255, 18, 32, 47),
      ),
      home: Scaffold(
        appBar: AppBar(title: Center(child: Text('내 식단 작성', style: TextStyle(color: Colors.black),)),

          backgroundColor: Colors.white,),
        body:Column(
          children: [
            Expanded(
              child: ListView.builder(
                // FIXME : 누적되는 정보 갯수 정하기
                  itemCount: 3,
                  itemBuilder: (context, index){
                    return Page();
                  }
              ),
            ),

            Container(

              width: double.infinity,
              height:  50,
              margin: EdgeInsets.all(24),

              decoration: BoxDecoration(
                  color: Colors.grey,
                  borderRadius: BorderRadius.circular(20)
              ),
              child: Builder(
                builder: (context) => TextButton(
                  onPressed: () {
                    Navigator.pushReplacement(
                      context,           // FIXME : MealCreate 페이지로 가게
                      MaterialPageRoute(builder: (context) => MealCreate()),
                    );
                  },
                  child: Text("식단 추가하기", style: TextStyle(color: Colors.white)),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class DietPlan {
  final String date;
  final String time;
  final String description;
  final String imageUrl;

  DietPlan({required this.date, required this.time, required this.description, required this.imageUrl});

  factory DietPlan.fromJson(Map<String, dynamic> json) {
    List<String> parts = (json['created_at'] as String).split(' ');
    String date = parts[0];
    String time = parts[1];

    return DietPlan(
      date: date,
      time: time,
      description: json['description'] as String,
      imageUrl: json['imageUrl'] as String,
    );
  }
}

// TODO : 백엔드 url 적기
Future<String> fetchImageUrl() async {
  final response = await http.get(Uri.parse('http://your-backend-server.com/image-url'));

  if (response.statusCode == 200) {
    String jsonResponse = json.decode(response.body);
    return jsonResponse;  // 이미지 URL을 반환합니다.
  } else {
    throw Exception('Failed to load image url from server');
  }
}

// TODO : 백엔드 url 적기
Future<List<DietPlan>> fetchDietPlans() async {
  final response = await http.get(Uri.parse('http://your-backend-server.com/diet-plans'));

  if (response.statusCode == 200) {
    List jsonResponse = json.decode(response.body);
    List<DietPlan> dietPlans = jsonResponse.map((item) => DietPlan.fromJson(item)).toList();

    // 날짜와 시간 기준으로 정렬합니다. 최신 정보가 앞에 오도록 합니다.
    dietPlans.sort((a, b) {
      DateTime dateTimeA = DateTime.parse(a.date + ' ' + a.time);
      DateTime dateTimeB = DateTime.parse(b.date + ' ' + b.time);
      return dateTimeB.compareTo(dateTimeA);
    });

    // 최신의 3개만 반환합니다.
    return dietPlans.take(3).toList();
  } else {
    throw Exception('Failed to load diet plans from server');
  }
}

// TODO : 백엔드 url 적기
Future<void> addDietPlan(DietPlan dietPlan) async {
  final response = await http.post(
    Uri.parse('http://your-backend-server.com/diet-plans'),
    headers: <String, String>{
      'Content-Type': 'application/json; charset=UTF-8',
    },
    body: jsonEncode(<String, String>{
      'date': dietPlan.date,
      'time': dietPlan.time,
      'description': dietPlan.description,
      'imageUrl': dietPlan.imageUrl,
    }),
  );

  if (response.statusCode != 200) {
    throw Exception('Failed to add diet plan to server');
  }
}


class Page extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Container(
          width: 393,
          height: 850,
          clipBehavior: Clip.antiAlias,
          decoration: BoxDecoration(color: Color(0xFFF9F9F9)),
          child: Stack(
            children: [
              // Positioned(
              //   top: 63,
              //   left: 10.0,
              //   child: IconButton(
              //       icon: Icon(Icons.arrow_back),
              //       iconSize: 24,  // 아이콘 크기를 24로 설정.
              //       color: Colors.black,
              //       onPressed: () {
              //         // Main2에서 Main3 페이지로 이동
              //
              //         Navigator.pushReplacement(
              //           context,            // FIXME : main3 >> 메뉴
              //           MaterialPageRoute(builder: (context) => Main3()),
              //         );
              //       }
              //   ),
              // ),
              // Positioned(
              //   left: 35,
              //   top: 70,
              //   child: SizedBox(
              //     width: 324,
              //     height: 38.49,
              //     child: Text(
              //       '내 식단 작성',
              //       textAlign: TextAlign.center,
              //       style: TextStyle(
              //         color: Colors.black.withOpacity(0.800000011920929),
              //         fontSize: 20,
              //         fontFamily: 'Montserrat',
              //         fontWeight: FontWeight.w500,
              //         height: 0,
              //       ),
              //     ),
              //   ),
              // ),
              // Positioned(
              //   left: 15,
              //   top: 77,
              //   child: Container(
              //     width: 24,
              //     height: 24,
              //     padding: const EdgeInsets.symmetric(horizontal: 7.75, vertical: 4.25),
              //     child: Row(
              //       mainAxisSize: MainAxisSize.min,
              //       mainAxisAlignment: MainAxisAlignment.center,
              //       crossAxisAlignment: CrossAxisAlignment.center,
              //       children: [
              //
              //       ],
              //     ),
              //   ),
              // ),
              Positioned(
                left: 46,
                top: 154,
                child: Container(
                  width: 302,
                  height: 408.50,
                  decoration: ShapeDecoration(
                    color: Colors.white,
                    shape: RoundedRectangleBorder(
                      side: BorderSide(width: 0.50, color: Color(0xFF868686)),
                      borderRadius: BorderRadius.circular(30),
                    ),
                    shadows: [
                      BoxShadow(
                        color: Color(0x0C000000),
                        blurRadius: 64,
                        offset: Offset(0, 4),
                        spreadRadius: 0,
                      )
                    ],
                  ),
                ),
              ),

              // ... 이전 코드 생략 ...



              Positioned(
                left: 0,
                top: 114,
                child: Container(
                  width: 398,
                  decoration: ShapeDecoration(
                    shape: RoundedRectangleBorder(
                      side: BorderSide(
                        width: 1,
                        strokeAlign: BorderSide.strokeAlignCenter,
                        color: Colors.black.withOpacity(0.20000000298023224),
                      ),
                    ),
                  ),
                ),
              ),
              Positioned(
                left: 140,
                top: 170,
                child: FutureBuilder<List<DietPlan>>(
                  future: fetchDietPlans(),
                  builder: (context, snapshot) {
                    if (snapshot.hasData) {
                      return SizedBox(
                        width: 114,
                        height: 31,
                        child: Text(
                          snapshot.data![0].date,  // 첫 번째 식단 계획의 date를 표시합니다.
                          style: TextStyle(
                            color: Colors.black,
                            fontSize: 16,
                            fontFamily: 'Montserrat',
                            fontWeight: FontWeight.w500,
                            height: 0.07,
                          ),
                        ),
                      );
                    } else if (snapshot.hasError) {
                      return Text('${snapshot.error}');
                    }
                    return const CircularProgressIndicator();
                  },
                ),
              ),
              Positioned(
                left: 139,
                top: 201,
                child: Container(
                  width: 104,
                  decoration: ShapeDecoration(
                    shape: RoundedRectangleBorder(
                      side: BorderSide(
                        width: 1,
                        strokeAlign: BorderSide.strokeAlignCenter,
                      ),
                    ),
                  ),
                ),
              ),
              Positioned(
                left: 115,
                top: 220.50,  // 위치 조정
                child: Text(
                  '식사 시간 ',
                  style: TextStyle(
                    color: Colors.black,
                    fontSize: 15,
                    fontFamily: 'Montserrat',
                    fontWeight: FontWeight.w500,
                    height: 0,
                  ),
                ),
              ),
              Positioned(
                left: 180,
                top: 222.50,
                child: FutureBuilder<List<DietPlan>>(
                  future: fetchDietPlans(),
                  builder: (context, snapshot) {
                    if (snapshot.hasData) {
                      return SizedBox(
                        width: 164,
                        height: 21,
                        child: Text(
                          snapshot.data![0].time,  // 첫 번째 식단 계획의 time를 표시합니다.
                          style: TextStyle(
                            color: Colors.black,
                            fontSize: 10,
                            fontFamily: 'Montserrat',
                            fontWeight: FontWeight.w500,
                            height: 0,
                          ),
                          textAlign: TextAlign.center,
                        ),
                      );
                    } else if (snapshot.hasError) {
                      return Text('${snapshot.error}');
                    }
                    return const CircularProgressIndicator();
                  },
                ),
              ),

              Positioned(
                left: 73,
                top: 457.50,
                child: Container(
                  width: 247,
                  height: 81,
                  decoration: ShapeDecoration(
                    color: Colors.white,
                    shape: RoundedRectangleBorder(
                      side: BorderSide(width: 1, color: Color(0x9E3C3C3C)),
                    ),
                  ),
                ),
              ),
              Positioned(
                left: 80,
                top: 461,
                child: FutureBuilder<List<DietPlan>>(
                  future: fetchDietPlans(),
                  builder: (context, snapshot) {
                    if (snapshot.hasData) {
                      return SizedBox(
                        width: 234,
                        height: 74,
                        child: Text(
                          snapshot.data![0].description, // 첫 번째 DietPlan의 description을 표시합니다.
                          style: TextStyle(
                            color: Colors.black,
                            fontSize: 10,
                            fontFamily: 'Montserrat',
                            fontWeight: FontWeight.w500,
                            height: 1.7,
                          ),
                        ),
                      );
                    } else if (snapshot.hasError) {
                      return Text('${snapshot.error}');
                    }
                    return const CircularProgressIndicator();
                  },
                ),
              ),

              Positioned(
                left: 73,
                top: 248.50,
                child: FutureBuilder<String>(
                  future: fetchImageUrl(),
                  builder: (context, snapshot) {
                    return Container(
                      width: 247,
                      height: 185,
                      decoration: ShapeDecoration(
                        image: snapshot.hasData ? DecorationImage(
                          image: NetworkImage(snapshot.data!),
                          fit: BoxFit.contain,
                        ) : null,
                        shape: RoundedRectangleBorder(
                          side: BorderSide(  // 테두리 설정 // FIXME : 이미지가 나오면 테두리가 필요없어지니까 테두리 코드 삭제
                            color: Colors.black,  // 테두리 색상은 검은색
                            width: 2,  // 테두리 두께는 3
                          ),
                          borderRadius: BorderRadius.circular(15),
                        ),
                      ),
                      child: snapshot.hasData ? null : snapshot.hasError ? Text('${snapshot.error}') : const CircularProgressIndicator(),
                    );
                  },
                ),
              ),


            ],
          ),
        ),
      ],
    );
  }
}